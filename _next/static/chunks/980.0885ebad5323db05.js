(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[980],{5223:function(n,e,t){"use strict";t.d(e,{s:function(){return i}});var r=t(7294);function i(){var n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],e=(0,r.useRef)(0),t=(0,r.useRef)(0),i=(0,r.useRef)(0),c=(0,r.useRef)([]),o=(0,r.useRef)(!1);(0,r.useEffect)((function(){t.current=performance.now(),i.current=0,c.current=[]}),[n]);var a=(0,r.useCallback)((function(){var n=performance.now();i.current=i.current+1,n>=t.current+100&&(e.current=100*i.current/(n-t.current)*10,c.current.push(e.current),t.current=n,i.current=0),c.current.length<=9||(c.current=c.current.slice(-9),c.current.every((function(n){return n<60}))&&(o.current=!0),c.current.every((function(n){return n>70}))&&(o.current=!1))}),[]);return{measureFps:a,fps:e,isLowFps:o}}},6980:function(n,e,t){"use strict";t.r(e),t.d(e,{DisplacementSphere:function(){return z}});var r=t(8616),i=t(1799),c=t(9815),o=t(5893),a=t(8718),u=t(7260),f=t(6240),l=t(7378),g=t(4529),s=t(5223),v=t(7294),d=t(9477),p=t(2362),m=t(3142),x=t(9030),_=t.n(x),y={stiffness:30,damping:20,mass:2},z=function(n){var e=(0,a.Fg)(),t=e.rgbBackground,x=e.themeId,z=e.colorWhite,P=(0,v.useRef)(Date.now()),h=(0,v.useRef)(),w=(0,v.useRef)(),b=(0,v.useRef)(),R=(0,v.useRef)(),S=(0,v.useRef)(),C=(0,v.useRef)(),E=(0,v.useRef)(),L=(0,v.useRef)(),k=(0,v.useRef)(),F=(0,v.useRef)(),I=(0,f.J)(),D=(0,g.NM)(h),M=(0,g.iP)(),j=(0,l.q)(0,y),A=(0,l.q)(0,y),q=(0,s.s)(D),N=q.measureFps,O=q.isLowFps;return(0,v.useEffect)((function(){var n=window.innerWidth,e=window.innerHeight;return w.current=new d.FM8(.8,.5),b.current=new d.CP7({canvas:h.current,antialias:!1,alpha:!0,powerPreference:"high-performance",failIfMajorPerformanceCaveat:!0}),b.current.setSize(n,e),b.current.setPixelRatio(1),b.current.outputEncoding=d.knz,R.current=new d.cPb(54,n/e,.1,100),R.current.position.z=52,S.current=new d.xsS,L.current=new d.xoR,L.current.onBeforeCompile=function(n){E.current=d.rDY.merge([n.uniforms,{time:{type:"f",value:0}}]),n.uniforms=E.current,n.vertexShader='//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\n#define PHONG\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat turbulence(vec3 p) {\n  float w = 100.0;\n  float t = -.5;\n  for (float f = 1.0 ; f <= 10.0 ; f++) {\n    float power = pow(2.0, f);\n    t += abs(pnoise(vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\n  }\n  return t;\n}\n\n// START\nuniform float time;\nvarying vec2 vUv;\nvarying float noise;\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n  vUv = uv;\n\n  noise = turbulence(0.01 * position + normal + time * 0.8);\n  vec3 displacement = vec3((position.x) * noise, position.y * noise, position.z * noise);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4((position + normal) + displacement, 1.0);\n}\n',n.fragmentShader="#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 newPosition;\nvarying float noise;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\t#include <clipping_planes_fragment>\n\n  vec3 color = vec3(vUv * (0.2 - 2.0 * noise), 1.0);\n  vec3 finalColors = vec3(color.b * 1.5, color.r, color.r);\n  vec4 diffuseColor = vec4(cos(finalColors * noise * 3.0), 1.0);\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\n  vec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n  \n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n}\n"},(0,v.startTransition)((function(){k.current=new d.Aip(32,128,128),F.current=new d.Kj0(k.current,L.current),F.current.position.z=0,F.current.modifier=Math.random(),S.current.add(F.current)})),function(){(0,m.in)(S.current),(0,m.e8)(b.current)}}),[]),(0,v.useEffect)((function(){var n=new d.Ox3(z,.6),e=new d.Mig(z,"light"===x?.8:.1);return n.position.z=200,n.position.x=100,n.position.y=100,C.current=[n,e],S.current.background=(0,r.Z)(d.Ilk,(0,c.Z)((0,p.Zm)(t))),C.current.forEach((function(n){return S.current.add(n)})),function(){(0,m.Ji)(C.current)}}),[t,z,x]),(0,v.useEffect)((function(){var n=M.width,e=M.height,t=e+.3*e;b.current.setSize(n,t),R.current.aspect=n/t,R.current.updateProjectionMatrix(),I&&b.current.render(S.current,R.current),n<=p.BC.mobile?(F.current.position.x=14,F.current.position.y=10):n<=p.BC.tablet?(F.current.position.x=18,F.current.position.y=14):(F.current.position.x=22,F.current.position.y=16)}),[I,M]),(0,v.useEffect)((function(){var n=function(n){var e=n.clientX/window.innerWidth,t=n.clientY/window.innerHeight;j.set(t/2),A.set(e/2)};return!I&&D&&window.addEventListener("mousemove",n),function(){window.removeEventListener("mousemove",n)}}),[D,I,j,A]),(0,v.useEffect)((function(){var n,e=function(){n=requestAnimationFrame(e),void 0!==E.current&&(E.current.time.value=5e-5*(Date.now()-P.current)),F.current.rotation.z+=.001,F.current.rotation.x=j.get(),F.current.rotation.y=A.get(),b.current.render(S.current,R.current),N(),O.current?b.current.setPixelRatio(.5):b.current.setPixelRatio(1)};return!I&&D?e():b.current.render(S.current,R.current),function(){cancelAnimationFrame(n)}}),[D,N,I,O,j,A]),(0,o.jsx)(u.u,{in:!0,timeout:3e3,children:function(e){return(0,o.jsx)("canvas",(0,i.Z)({"aria-hidden":!0,className:_().canvas,"data-visible":e,ref:h},n))}})}},3142:function(n,e,t){"use strict";t.d(e,{Et:function(){return f},Ji:function(){return v},Zf:function(){return u},e8:function(){return s},in:function(){return l},x2:function(){return d}});var r=t(9477),i=t(4976),c=t(7607);r.CtF.enabled=!0;var o=new i._,a=new c.E;o.setDecoderPath("/draco/"),a.setDRACOLoader(o);var u=a,f=new r.dpR,l=function(n){null===n||void 0===n||n.traverse((function(n){if(n.isMesh)if(n.geometry.dispose(),n.material.isMaterial)g(n.material);else{var e=!0,t=!1,r=void 0;try{for(var i,c=n.material[Symbol.iterator]();!(e=(i=c.next()).done);e=!0){var o=i.value;g(o)}}catch(a){t=!0,r=a}finally{try{e||null==c.return||c.return()}finally{if(t)throw r}}}}))},g=function(n){n.dispose();var e=!0,t=!1,r=void 0;try{for(var i,c=Object.keys(n)[Symbol.iterator]();!(e=(i=c.next()).done);e=!0){var o,a,u,f=n[i.value];if(f&&"object"===typeof f&&"minFilter"in f)f.dispose(),null===(o=f.source)||void 0===o||null===(a=o.data)||void 0===a||null===(u=a.close)||void 0===u||u.call(a)}}catch(l){t=!0,r=l}finally{try{e||null==c.return||c.return()}finally{if(t)throw r}}},s=function(n){n.dispose(),n=null},v=function(n){var e=!0,t=!1,r=void 0;try{for(var i,c=n[Symbol.iterator]();!(e=(i=c.next()).done);e=!0){var o=i.value;o.parent.remove(o)}}catch(a){t=!0,r=a}finally{try{e||null==c.return||c.return()}finally{if(t)throw r}}},d=function(n,e){var t;return e.traverse((function(e){e.name===n&&(t=e)})),t}},9030:function(n){n.exports={canvas:"DisplacementSphere_canvas__zrcVe"}},8616:function(n,e,t){"use strict";function r(n,e){return r=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n},r(n,e)}function i(n,e){return r(n,e)}function c(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(n){return!1}}function o(n,e,t){return o=c()?Reflect.construct:function(n,e,t){var r=[null];r.push.apply(r,e);var c=new(Function.bind.apply(n,r));return t&&i(c,t.prototype),c},o.apply(null,arguments)}function a(n,e,t){return o.apply(null,arguments)}t.d(e,{Z:function(){return a}})}}]);